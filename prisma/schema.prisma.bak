generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HmsAccountingEntry {
  id         String      @id
  tenantId   String
  invoiceId  String?
  paymentId  String?
  account    String
  debit      Decimal     @default(0) @db.Decimal(14, 2)
  credit     Decimal     @default(0) @db.Decimal(14, 2)
  createdAt  DateTime    @default(now())
  HmsInvoice HmsInvoice? @relation(fields: [invoiceId], references: [id])
  HmsPayment HmsPayment? @relation(fields: [paymentId], references: [id])
  HmsTenant  HmsTenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}



model HmsInvoice {
  id                 String               @id
  tenantId           String
  patientId          String?
  invoiceNo          String               @unique
  subtotal           Decimal              @default(0) @db.Decimal(12, 2)
  discount           Decimal              @default(0) @db.Decimal(12, 2)
  tax                Decimal              @default(0) @db.Decimal(12, 2)
  total              Decimal              @default(0) @db.Decimal(12, 2)
  status             String               @default("UNPAID")
  createdAt          DateTime             @default(now())
  date               DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  HmsAccountingEntry HmsAccountingEntry[]
  HmsPatient         HmsPatient?          @relation(fields: [patientId], references: [id])
  HmsTenant          HmsTenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  HmsInvoiceItem     HmsInvoiceItem[]
  HmsMessageLog      HmsMessageLog[]
  HmsPayment         HmsPayment[]

  @@index([tenantId])
}

model HmsInvoiceItem {
  id              String           @id
  invoiceId       String
  serviceId       String?
  description     String
  qty             Int              @default(1)
  rate            Decimal          @db.Decimal(12, 2)
  amount          Decimal          @db.Decimal(12, 2)
  batchId         String?
  productId       String?
  HmsProductBatch HmsProductBatch? @relation(fields: [batchId], references: [id])
  HmsInvoice      HmsInvoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  HmsProduct      HmsProduct?      @relation(fields: [productId], references: [id])
  HmsService      HmsService?      @relation(fields: [serviceId], references: [id])
}

model HmsLocation {
  id                                                    String          @id
  tenantId                                              String
  warehouseId                                           String
  code                                                  String
  name                                                  String?
  level                                                 Int?
  createdAt                                             DateTime        @default(now())
  HmsTenant                                             HmsTenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  HmsWarehouse                                          HmsWarehouse    @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  HmsStockLevel                                         HmsStockLevel[]
  HmsStockMove_HmsStockMove_fromLocationIdToHmsLocation HmsStockMove[]  @relation("HmsStockMove_fromLocationIdToHmsLocation")
  HmsStockMove_HmsStockMove_toLocationIdToHmsLocation   HmsStockMove[]  @relation("HmsStockMove_toLocationIdToHmsLocation")

  @@index([warehouseId, code])
}

model HmsMessageLog {
  id         String      @id
  tenantId   String
  patientId  String?
  invoiceId  String?
  channel    String
  to         String
  provider   String
  status     String
  providerId String?
  error      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  HmsInvoice HmsInvoice? @relation(fields: [invoiceId], references: [id])
  HmsPatient HmsPatient? @relation(fields: [patientId], references: [id])
  HmsTenant  HmsTenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model HmsPatient {
  id            String          @id
  tenantId      String
  uhid          String?         @unique
  firstName     String
  lastName      String?
  phone         String?
  email         String?
  createdAt     DateTime        @default(now())
  address       String?
  dob           DateTime?       @db.Date
  updatedAt     DateTime        @default(now())
  gender        String?
  meta          Json?           @default("{}")
  createdBy     String?
  updatedBy     String?
  HmsInvoice    HmsInvoice[]
  HmsMessageLog HmsMessageLog[]
  HmsTenant     HmsTenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([email], map: "idx_HmsPatient_email")
  @@index([phone], map: "idx_HmsPatient_phone")
  @@index([tenantId], map: "idx_HmsPatient_tenantId")
  @@index([phone], map: "idx_hmspatient_phone")
}

model HmsPayment {
  id                 String               @id
  tenantId           String
  invoiceId          String
  amount             Decimal              @db.Decimal(12, 2)
  mode               String
  reference          String?
  receivedAt         DateTime             @default(now())
  createdAt          DateTime             @default(now())
  HmsAccountingEntry HmsAccountingEntry[]
  HmsInvoice         HmsInvoice           @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  HmsTenant          HmsTenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model HmsProduct {
  id              String            @id
  tenantId        String
  code            String            @unique
  barcode         String?           @unique
  name            String
  brand           String?
  category        String?
  uom             String?
  packSize        Int?
  salePrice       Decimal?          @db.Decimal(12, 2)
  costPrice       Decimal?          @db.Decimal(12, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  HmsInvoiceItem  HmsInvoiceItem[]
  HmsTenant       HmsTenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  HmsProductBatch HmsProductBatch[]
  HmsPurchaseLine HmsPurchaseLine[]
  HmsStockLevel   HmsStockLevel[]
  HmsStockMove    HmsStockMove[]

  @@index([barcode])
  @@index([code])
  @@index([name])
}

model HmsProductBatch {
  id             String           @id
  productId      String
  batchNo        String
  manufacture    DateTime?
  expiry         DateTime?
  costPrice      Decimal?         @db.Decimal(12, 2)
  createdAt      DateTime         @default(now())
  HmsInvoiceItem HmsInvoiceItem[]
  HmsProduct     HmsProduct       @relation(fields: [productId], references: [id], onDelete: Cascade)
  HmsStockLevel  HmsStockLevel[]
  HmsStockMove   HmsStockMove[]

  @@index([expiry])
  @@index([productId, batchNo])
}

model HmsPurchaseLine {
  id               String           @id
  tenantId         String
  purchaseId       String
  productId        String
  qty              Int
  receivedQty      Int              @default(0)
  rate             Decimal          @db.Decimal(12, 2)
  batchNo          String?
  expiry           DateTime?
  HmsProduct       HmsProduct       @relation(fields: [productId], references: [id])
  HmsPurchaseOrder HmsPurchaseOrder @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  HmsTenant        HmsTenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model HmsPurchaseOrder {
  id              String            @id
  tenantId        String
  supplierId      String?
  orderNo         String            @unique
  status          String
  createdAt       DateTime          @default(now())
  HmsPurchaseLine HmsPurchaseLine[]
  HmsSupplier     HmsSupplier?      @relation(fields: [supplierId], references: [id])
  HmsTenant       HmsTenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model HmsService {
  id             String           @id
  tenantId       String
  code           String?          @unique
  name           String
  rate           Decimal          @db.Decimal(12, 2)
  createdAt      DateTime         @default(now())
  HmsInvoiceItem HmsInvoiceItem[]
  HmsTenant      HmsTenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model HmsStockLevel {
  id              String           @id
  tenantId        String
  productId       String
  locationId      String
  batchId         String?
  quantity        Int              @default(0)
  reserved        Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  HmsProductBatch HmsProductBatch? @relation(fields: [batchId], references: [id])
  HmsLocation     HmsLocation      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  HmsProduct      HmsProduct       @relation(fields: [productId], references: [id], onDelete: Cascade)
  HmsTenant       HmsTenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([productId, locationId, batchId])
  @@index([locationId])
  @@index([productId])
}

model HmsStockMove {
  id                                                   String           @id
  tenantId                                             String
  productId                                            String
  batchId                                              String?
  fromLocationId                                       String?
  toLocationId                                         String?
  qty                                                  Int
  type                                                 StockMoveType
  ref                                                  String?
  createdBy                                            String?
  createdAt                                            DateTime         @default(now())
  HmsProductBatch                                      HmsProductBatch? @relation(fields: [batchId], references: [id])
  HmsLocation_HmsStockMove_fromLocationIdToHmsLocation HmsLocation?     @relation("HmsStockMove_fromLocationIdToHmsLocation", fields: [fromLocationId], references: [id])
  HmsProduct                                           HmsProduct       @relation(fields: [productId], references: [id])
  HmsTenant                                            HmsTenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  HmsLocation_HmsStockMove_toLocationIdToHmsLocation   HmsLocation?     @relation("HmsStockMove_toLocationIdToHmsLocation", fields: [toLocationId], references: [id])

  @@index([fromLocationId])
  @@index([productId])
  @@index([ref])
  @@index([toLocationId])
}

model HmsSupplier {
  id               String             @id
  tenantId         String
  name             String
  phone            String?
  email            String?
  address          String?
  createdAt        DateTime           @default(now())
  HmsPurchaseOrder HmsPurchaseOrder[]
  HmsTenant        HmsTenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model HmsTenant {
  id                 String               @id
  name               String
  createdAt          DateTime             @default(now())
  HmsAccountingEntry HmsAccountingEntry[]
  HmsDoctor          HmsDoctor[]
  HmsInvoice         HmsInvoice[]
  HmsLocation        HmsLocation[]
  HmsMessageLog      HmsMessageLog[]
  HmsPatient         HmsPatient[]
  HmsPayment         HmsPayment[]
  HmsProduct         HmsProduct[]
  HmsPurchaseLine    HmsPurchaseLine[]
  HmsPurchaseOrder   HmsPurchaseOrder[]
  HmsService         HmsService[]
  HmsStockLevel      HmsStockLevel[]
  HmsStockMove       HmsStockMove[]
  HmsSupplier        HmsSupplier[]
  HmsWarehouse       HmsWarehouse[]
}

model HmsWarehouse {
  id          String        @id
  tenantId    String
  code        String        @unique
  name        String
  address     String?
  createdAt   DateTime      @default(now())
  HmsLocation HmsLocation[]
  HmsTenant   HmsTenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model agent_task {
  id            String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id     String    @db.Uuid
  lead_id       String?   @db.Uuid
  type          String
  handler       String?
  payload       Json?     @default("{}")
  status        String?   @default("pending")
  scheduled_for DateTime? @db.Timestamptz(6)
  started_at    DateTime? @db.Timestamptz(6)
  completed_at  DateTime? @db.Timestamptz(6)
  result        Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model agent_task_log {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id    String?   @db.Uuid
  step       String?
  meta       Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ai_action {
  id              String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id       String    @db.Uuid
  session_id      String?   @db.Uuid
  lead_id         String?   @db.Uuid
  user_id         String?   @db.Uuid
  action_type     String
  payload         Json?     @default("{}")
  accepted        Boolean?
  executed        Boolean?  @default(false)
  executed_result Json?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ai_assistant_session {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  user_id    String?   @db.Uuid
  context    Json?     @default("{}")
  messages   Json?     @default("[]")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ai_embedding {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String    @db.Uuid
  lead_id      String?   @db.Uuid
  namespace    String
  reference_id String?
  content      String?
  vector       Bytes?
  metadata     Json?     @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}



/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model attachment {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String    @db.Uuid
  lead_id      String?   @db.Uuid
  company_id   String?   @db.Uuid
  uploaded_by  String?   @db.Uuid
  filename     String
  content_type String?
  size_bytes   BigInt?
  storage_key  String
  metadata     Json?     @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model audit_log {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String?   @db.Uuid
  actor_id   String?   @db.Uuid
  table_name String
  record_id  String?   @db.Uuid
  operation  String
  diff       Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

model business_partners {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id        String   @db.Uuid
  name             String
  email            String?
  phone            String?
  website          String?
  gstin            String?
  pan              String?
  billing_address  Json?
  shipping_address Json?
  is_customer      Boolean  @default(true)
  is_vendor        Boolean  @default(false)
  is_partner       Boolean  @default(false)
  status           String?  @default("active")
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)

  @@index([tenant_id], map: "bp_tenant_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model catalog_pipeline_template {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String
  name        String
  description String?
  metadata    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

model company {
  id         String                   @unique(map: "uq_company_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String                   @db.Uuid
  name       String
  enabled    Boolean?                 @default(true)
  metadata   Json?                    @default("{}")
  created_at DateTime?                @default(now()) @db.Timestamptz(6)
  search_tsv Unsupported("tsvector")?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model contact {
  id         String                   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenant_id  String?                  @db.Uuid
  search_tsv Unsupported("tsvector")?
  first_name String?
  last_name  String?
  email      String?
  phone      String?
  role_title String?
  meta       Json?                    @default("{}")
  created_at DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at DateTime                 @default(now()) @db.Timestamptz(6)
  company_id String?                  @db.Uuid
  owner_id   String?                  @db.Uuid

  @@ignore
}

model custom_field_definition {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String    @db.Uuid
  company_id  String?   @db.Uuid
  pipeline_id String?   @db.Uuid
  entity      String    @default("lead")
  key         String
  label       String
  field_type  String
  options     Json?
  required    Boolean?  @default(false)
  visible     Boolean?  @default(true)
  sort_order  Int?      @default(100)
  metadata    Json?     @default("{}")
  created_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, entity, key], map: "ux_cfd_base_tenant_entity_key")
}

model custom_field_value {
  id            String    @id(map: "pk_custom_field_value") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  definition_id String    @db.Uuid
  tenant_id     String    @db.Uuid
  lead_id       String    @db.Uuid
  value_text    String?
  value_number  Decimal?  @db.Decimal
  value_boolean Boolean?
  value_json    Json?
  created_by    String?   @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, lead_id, definition_id], map: "uq_cfv_tenant_lead_definition")
  @@unique([tenant_id, lead_id, definition_id], map: "ux_cfv_tenant_lead_definition")
  @@index([lead_id], map: "ix_cfv_lead")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model custom_fields {
  id          String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String   @db.Uuid
  company_id  String?  @db.Uuid
  pipeline_id String?  @db.Uuid
  entity      String
  key         String
  label       String
  field_type  String
  options     Json?
  required    Boolean  @default(false)
  visible     Boolean  @default(true)
  sort_order  Int      @default(100)
  metadata    Json?
  created_by  String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model deals {
  id         String                   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenant_id  String?                  @db.Uuid
  search_tsv Unsupported("tsvector")?

  @@ignore
}

model express_session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_express_session_expire")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model import_job {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String    @db.Uuid
  company_id  String?   @db.Uuid
  uploaded_by String?   @db.Uuid
  filename    String?
  status      String?   @default("uploaded")
  summary     Json?     @default("{}")
  error       String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead {
  id                 String                   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id          String                   @db.Uuid
  company_id         String?                  @db.Uuid
  owner_id           String?                  @db.Uuid
  pipeline_id        String?                  @db.Uuid
  stage_id           String?                  @db.Uuid
  name               String
  primary_email      String?
  primary_phone      String?
  source_id          String?                  @db.Uuid
  status             String?                  @default("new")
  estimated_value    Decimal?                 @default(0) @db.Decimal
  probability        Decimal?                 @default(0) @db.Decimal
  priority           Int?                     @default(3) @db.SmallInt
  custom_data        Json?                    @default("{}")
  tags               String[]                 @default([])
  meta               Json?                    @default("{}")
  created_by         String?                  @db.Uuid
  created_at         DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?                @default(now()) @db.Timestamptz(6)
  metadata           Json?                    @default("{}")
  search_vector      Unsupported("tsvector")?
  stage              String?                  @default("new")
  primary_phone_e164 String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_activity {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id    String    @db.Uuid
  tenant_id  String    @db.Uuid
  actor_id   String?   @db.Uuid
  actor_type String?   @default("user")
  action_key String
  payload    Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_assignment {
  id            String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id       String    @db.Uuid
  tenant_id     String    @db.Uuid
  assigned_from String?   @db.Uuid
  assigned_to   String?   @db.Uuid
  assigned_by   String?   @db.Uuid
  reason        String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_assignment_history {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String?   @db.Uuid
  lead_id    String    @db.Uuid
  rule_id    String?   @db.Uuid
  from_owner String?   @db.Uuid
  to_owner   String    @db.Uuid
  reason     String?
  created_by String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_assignment_rule {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String?   @db.Uuid
  pipeline_id String?   @db.Uuid
  criteria    Json
  assign_to   String    @db.Uuid
  priority    Int?      @default(100)
  active      Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_duplicate {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String    @db.Uuid
  lead_id      String    @db.Uuid
  duplicate_of String    @db.Uuid
  score        Decimal   @db.Decimal
  status       String?   @default("pending")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_event {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  lead_id    String?   @db.Uuid
  event_key  String
  payload    Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_followups {
  id             BigInt    @default(autoincrement())
  lead_id        String    @db.Uuid
  due_at         DateTime  @db.Timestamptz(6)
  status         String    @default("planned")
  note           String?
  changed_by     String?   @db.Uuid
  change_reason  String?
  version        Int       @default(1)
  effective_from DateTime  @default(now()) @db.Timestamptz(6)
  effective_to   DateTime? @db.Timestamptz(6)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)

  @@ignore
}

model lead_history {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String   @db.Uuid
  lead_id    String   @db.Uuid
  event_type String
  field_key  String?
  old_value  Json?
  new_value  Json?
  meta       Json?
  created_by String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, lead_id, field_key], map: "ux_lead_history_tenant_lead_field")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_note {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id    String    @db.Uuid
  tenant_id  String    @db.Uuid
  author_id  String?   @db.Uuid
  body       String
  visibility String?   @default("internal")
  metadata   Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_schedule {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String?   @db.Uuid
  lead_id      String    @db.Uuid
  title        String
  note         String?
  scheduled_at DateTime  @db.Timestamptz(6)
  assignee_id  String?   @db.Uuid
  done_at      DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_source {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  key        String
  name       String
  config     Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_stage {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String    @db.Uuid
  key         String
  name        String
  ordinal     Int       @default(0)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  order_index Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_stage_history {
  id            String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id       String    @db.Uuid
  from_stage_id String?   @db.Uuid
  to_stage_id   String?   @db.Uuid
  changed_by    String?   @db.Uuid
  reason        String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id     String    @db.Uuid
  from_stage    String?
  to_stage      String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_tag {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id    String    @db.Uuid
  tag_id     String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_task {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String    @db.Uuid
  lead_id      String    @db.Uuid
  title        String
  due_date     DateTime? @db.Date
  status       String    @default("open")
  assigned_to  String?   @db.Uuid
  created_by   String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  completed_at DateTime? @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_template {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String?   @db.Uuid
  key         String
  name        String
  description String?
  spec        Json
  scope       Json?     @default("{}")
  is_active   Boolean?  @default(true)
  created_by  String?   @db.Uuid
  updated_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model lead_template_pipeline_map {
  id                   String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_template_id     String    @db.Uuid
  pipeline_template_id String    @db.Uuid
  created_at           DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model opportunity {
  id                  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id           String    @db.Uuid
  lead_id             String?   @db.Uuid
  pipeline_id         String    @db.Uuid
  stage_id            String    @db.Uuid
  name                String
  amount              Decimal?  @db.Decimal
  probability         Decimal?  @db.Decimal
  expected_close_date DateTime? @db.Date
  status              String?   @default("open")
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

model permission {
  code            String            @id
  name            String
  description     String?
  category        String?
  is_deprecated   Boolean?          @default(false)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  role_permission role_permission[]
  user_permission user_permission[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pipeline {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  company_id String?   @db.Uuid
  name       String
  metadata   Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pipeline_stage {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pipeline_id String    @db.Uuid
  key         String
  name        String
  sort_order  Int?      @default(100)
  is_won      Boolean?  @default(false)
  is_lost     Boolean?  @default(false)
  metadata    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pipeline_template {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String
  name        String
  description String?
  metadata    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id   String    @db.Uuid
  is_public   Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pipeline_template_stage {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_id String    @db.Uuid
  key         String
  name        String
  sort_order  Int       @default(0)
  probability Decimal?  @default(0) @db.Decimal(5, 2)
  is_won      Boolean?  @default(false)
  is_lost     Boolean?  @default(false)
  color       String?   @db.VarChar(7)
  metadata    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model refresh_tokens {
  rid                    String
  sid                    String
  user_id                String    @db.Uuid
  tenant_id              String?   @db.Uuid
  token_hash             String?
  revoked                Boolean   @default(false)
  replaced_by_token_hash String?
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  expires_at             DateTime? @db.Timestamptz(6)

  @@ignore
}

model role {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id       String?           @db.Uuid
  key             String
  name            String
  permissions     String[]          @default([])
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  role_permission role_permission[]
}

model role_permission {
  role_id         String     @db.Uuid
  permission_code String
  tenant_id       String?    @db.Uuid
  is_granted      Boolean    @default(true)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  permission      permission @relation(fields: [permission_code], references: [code], onDelete: Cascade, onUpdate: NoAction)
  role            role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_code])
  @@index([permission_code], map: "idx_role_permission_code")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sessions {
  sid             String
  user_id         String    @db.Uuid
  tenant_id       String?   @db.Uuid
  device          String?
  issued_at       DateTime  @default(now()) @db.Timestamptz(6)
  last_seen       DateTime  @default(now()) @db.Timestamptz(6)
  meta            Json?     @default("{}")
  absolute_expiry DateTime? @db.Timestamptz(6)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tag {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  key        String
  name       String
  metadata   Json?     @default("{}")
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

model tenant {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug          String
  name          String
  billing_plan  String?
  metadata      Json?           @default("{}")
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  tenant_id     String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  domain        String?         @db.Citext
  deleted_at    DateTime?       @db.Timestamptz(6)
  tenant_module tenant_module[]
}

model tenant_module {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String   @db.Uuid
  module_key String
  enabled    Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  tenant     tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tenant_module_tenant_fkey")

  @@unique([tenant_id, module_key], map: "idx_tenant_module_unique")
  @@index([tenant_id], map: "idx_tenant_module_tenant")
}

model user_companies {
  tenant_id  String   @db.Uuid
  user_id    String   @db.Uuid
  company_id String   @db.Uuid
  is_default Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@id([tenant_id, user_id, company_id])
  @@index([tenant_id, company_id], map: "idx_user_companies_company")
  @@index([tenant_id, user_id], map: "idx_user_companies_user")
}

model user_permission {
  user_id         String     @db.Uuid
  tenant_id       String     @db.Uuid
  permission_code String
  is_granted      Boolean    @default(true)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  permission      permission @relation(fields: [permission_code], references: [code], onDelete: Cascade, onUpdate: NoAction)
  app_user        app_user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, tenant_id, permission_code])
  @@index([user_id, tenant_id], map: "idx_user_permission_user_tenant")
}

model user_role {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  role_id     String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id   String?   @db.Uuid

  @@unique([tenant_id, user_id, role_id], map: "ux_user_role_tenant_user_role")
  @@index([role_id, tenant_id], map: "idx_user_role_role_tenant")
  @@index([user_id, tenant_id], map: "idx_user_role_user_tenant")
}

enum StockMoveType {
  RECEIPT
  ISSUE
  TRANSFER
  ADJUSTMENT
  SALE
  RETURN
  DAMAGED
}




enum AppointmentStatus {
  scheduled
  confirmed
  cancelled
  completed
  no_show
}

enum VisitStatus {
  active
  completed
  cancelled
  no_show
}

model HmsDoctor {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    HmsTenant @relation(fields: [tenantId], references: [id])
  firstName String
  lastName  String
  specialty String?
  createdAt DateTime @default(now())
  // ...
  appointments HmsAppointment[]
  visits       HmsVisit[]
}

model HmsAppointment {
  id          String             @id @default(uuid())
  tenantId    String
  tenant      HmsTenant          @relation(fields: [tenantId], references: [id])
  patientId   String
  patient     HmsPatient         @relation(fields: [patientId], references: [id])
  doctorId    String?
  doctor      HmsDoctor?         @relation(fields: [doctorId], references: [id])
  scheduledAt DateTime?
  status      AppointmentStatus  @default(scheduled)
  reason      String?
  createdById String?
  createdBy   AppUser?           @relation("CreatedByAppointments", fields: [createdById], references: [id])
  cancelledAt DateTime?
  createdAt   DateTime           @default(now())

  @@index([tenantId, scheduledAt])
  @@index([tenantId, patientId])
}


model HmsVisit {
  id         String      @id @default(uuid())
  tenantId   String
  tenant     HmsTenant   @relation(fields: [tenantId], references: [id])
  patientId  String
  patient    HmsPatient  @relation(fields: [patientId], references: [id])
  doctorId   String?
  doctor     HmsDoctor?  @relation(fields: [doctorId], references: [id])
  visitDate  DateTime    @default(now())
  department String?
  status     VisitStatus @default(active)
  reason     String?
  createdById String?
  createdBy   AppUser?   @relation("CreatedByVisits", fields: [createdById], references: [id])
  checkedInAt DateTime?
  checkedOutAt DateTime?

  @@index([tenantId, visitDate])
  @@index([tenantId, patientId])
}


model AppUser {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("id")
  tenantId        String   @db.Uuid @map("tenant_id")
  companyId       String?  @db.Uuid @map("company_id")
  email           String   @map("email")
  name            String?  @map("name")
  password        String?  @map("password")
  isAdmin         Boolean? @default(false) @map("is_admin")
  isActive        Boolean? @default(true)  @map("is_active")
  metadata        Json?    @default(dbgenerated("'{}'::jsonb")) @map("metadata")
  createdAt       DateTime? @default(now()) @map("created_at")
  fullName        String?  @map("full_name")
  role            String?  @map("role")
  isPlatformAdmin Boolean  @default(false) @map("is_platform_admin")
  isTenantAdmin   Boolean  @default(false) @map("is_tenant_admin")

  // back-relations used by HmsAppointment and HmsVisit (names must match @relation in those models)
  CreatedByAppointments HmsAppointment[] @relation("CreatedByAppointments")
  CreatedByVisits       HmsVisit[]       @relation("CreatedByVisits")

  @@map("app_user")
}
